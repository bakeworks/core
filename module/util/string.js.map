{"version":3,"sources":["../../src/util/string.js"],"names":["capitalise","str","toUpperCase","slice","pluralise","count","singular","plural","undefined","digits","string","replace","camelCase","s","$1","cmp","_a","_b","ignorecase","a","b","eq","lt","lte","gt","gte"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACvB,SAAQ,GAAEA,IAAI,CAAJ,EAAOC,WAAP,EAAqB,GAAED,IAAIE,KAAJ,CAAU,CAAV,CAAa,EAA9C;AACD;;AAED,SAASC,SAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6C;AAC3C,MAAIF,UAAU,CAAd,EAAiB;AACf,WAAOC,QAAP;AACD,GAFD,MAEO;AACL,WAAOC,WAAWC,SAAX,GAAuBF,WAAW,GAAlC,GAAwCC,MAA/C;AACD;AACF;;AAED;AACA,SAASE,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOA,OAAOC,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAAP,CADuB,CACU;AAClC;;AAED,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,SAAOA,EAAEF,OAAF,CAAU,eAAV,EAA4BG,EAAD,IAAQ;AACxC,WAAOA,GAAGZ,WAAH,GACJS,OADI,CACI,GADJ,EACS,EADT,EAEJA,OAFI,CAEI,GAFJ,EAES,EAFT,CAAP;AAGD,GAJM,CAAP;AAKD;;AAED;AACA,SAASI,GAAT,CAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,aAAa,IAAnC,EAAyC;AACvC,QAAMC,IAAID,aAAaF,GAAGd,WAAH,EAAb,GAAgCc,EAA1C;AACA,QAAMI,IAAIF,aAAaD,GAAGf,WAAH,EAAb,GAAgCe,EAA1C;AACA,SAAOE,IAAIC,CAAJ,GAAQ,CAAC,CAAT,GAAcD,IAAIC,CAAJ,GAAQ,CAAR,GAAY,CAAjC;AACD;;AAED,SAASC,EAAT,CAAaF,CAAb,EAAgBC,CAAhB,EAAmBF,aAAa,IAAhC,EAAsC;AACpC,SAAOH,IAAII,CAAJ,EAAOC,CAAP,EAAUF,UAAV,MAA0B,CAAjC;AACD;;AAED,SAASI,EAAT,CAAaH,CAAb,EAAgBC,CAAhB,EAAmBF,aAAa,IAAhC,EAAsC;AACpC,SAAOH,IAAII,CAAJ,EAAOC,CAAP,EAAUF,UAAV,MAA0B,CAAC,CAAlC;AACD;;AAED,SAASK,GAAT,CAAcJ,CAAd,EAAiBC,CAAjB,EAAoBF,aAAa,IAAjC,EAAuC;AACrC,SAAOH,IAAII,CAAJ,EAAOC,CAAP,EAAUF,UAAV,KAAyB,CAAhC;AACD;;AAED,SAASM,EAAT,CAAaL,CAAb,EAAgBC,CAAhB,EAAmBF,aAAa,IAAhC,EAAsC;AACpC,SAAOH,IAAII,CAAJ,EAAOC,CAAP,EAAUF,UAAV,MAA0B,CAAjC;AACD;;AAED,SAASO,GAAT,CAAcN,CAAd,EAAiBC,CAAjB,EAAoBF,aAAa,IAAjC,EAAuC;AACrC,SAAOH,IAAII,CAAJ,EAAOC,CAAP,EAAUF,UAAV,KAAyB,CAAhC;AACD;;AAED,eAAe;AACblB,YADa;AAEbY,WAFa;AAGbR,WAHa;AAIbK,QAJa;AAKbM,KALa;AAMbM,IANa;AAObC,IAPa;AAQbC,KARa;AASbC,IATa;AAUbC;AAVa,CAAf","file":"string.js","sourcesContent":["function capitalise(str) {\n  return `${str[0].toUpperCase()}${str.slice(1)}`\n}\n\nfunction pluralise (count, singular, plural) {\n  if (count === 1) {\n    return singular\n  } else {\n    return plural === undefined ? singular + 's' : plural\n  }\n}\n\n// returns string with only the digits from given string\nfunction digits (string) {\n  return string.replace(/\\D/g, '') // \\D is anything but a digit\n}\n\nfunction camelCase(s) {\n  return s.replace(/([-_][a-z])/ig, ($1) => {\n    return $1.toUpperCase()\n      .replace('-', '')\n      .replace('_', '');\n  })\n}\n\n// TODO: locale\nfunction cmp (_a, _b, ignorecase = true) {\n  const a = ignorecase ? _a.toUpperCase() : _a\n  const b = ignorecase ? _b.toUpperCase() : _b\n  return a < b ? -1 : (a > b ? 1 : 0)\n}\n\nfunction eq (a, b, ignorecase = true) {\n  return cmp(a, b, ignorecase) === 0\n}\n\nfunction lt (a, b, ignorecase = true) {\n  return cmp(a, b, ignorecase) === -1\n}\n\nfunction lte (a, b, ignorecase = true) {\n  return cmp(a, b, ignorecase) <= 0\n}\n\nfunction gt (a, b, ignorecase = true) {\n  return cmp(a, b, ignorecase) === 1\n}\n\nfunction gte (a, b, ignorecase = true) {\n  return cmp(a, b, ignorecase) >= 1\n}\n\nexport default {\n  capitalise,\n  camelCase,\n  pluralise,\n  digits,\n  cmp,\n  eq,\n  lt,\n  lte,\n  gt,\n  gte\n}"]}