{"version":3,"sources":["../../../src/enums/product/stages.js"],"names":["string","origins","status","batching","WEIGH_CODE","MIX_CODE","FERMENT_CODE","LAYER_CODE","SHAPE_CODE","BAKE_CODE","ASSEMBLE_CODE","DECORATE_CODE","instantiate","code","sequence","requiresRecipe","requiresIngredients","isInputCounted","isCounted","batchTypes","all","defaultBatchSizing","VARIABLE","NONE","FIXED","label","capitalize","hasItemWeight","hasItemsPerBatch","isWeighed","isInputWeighed","inputs","outputs","defaultOrigin","SUPPLIED","PRODUCED","defaultStatus","FINISHED","INGREDIENT","allowPartialFixedBatch","isWeigh","isMix","isFerment","isLayer","isShape","isBake","isAssemble","isDecorate","weigh","mix","ferment","layer","shape","bake","assemble","decorate","DEFAULT","map","forEach","x","getInputStages","getOutputStages","Error"],"mappings":"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","file":"stages.js","sourcesContent":["import string from '../../util/string'\nimport origins from './origins'\nimport status from './status'\nimport batching from './batching'\n\n/*\nStages of production:\n  * prep (was raw/weigh)\n  * mix\n  * ferment\n  * layer\n  * shape\n  * bake\n  * assemble\n  * decorate\n\nRef:\n  * http://bakingstories.blogspot.com/p/12-steps.html\n*/\n\nconst WEIGH_CODE = 'Weigh' // or scale\nconst MIX_CODE = 'Mix'\nconst FERMENT_CODE = 'Ferment' // bulk/primary fermentation\nconst LAYER_CODE = 'Layer' // or fold\n// const PRESHAPE_CODE = 'preshape' // or rounding - before rest\n// const REST_CODE = 'rest' // before final shape\nconst SHAPE_CODE = 'Shape' // or panning\n// const PROOF_CODE = 'proof' // or final ferment\nconst BAKE_CODE = 'Bake'\nconst ASSEMBLE_CODE = 'Assemble'\nconst DECORATE_CODE = 'Decorate'\n\n\nfunction instantiate(code, sequence) {\n  const requiresRecipe = code !== WEIGH_CODE\n  /* baked (finished) products are allowede to have have unspecified ingredients\n   * but all other actions with recipe require ingredients */\n  const requiresIngredients = requiresRecipe && code !== BAKE_CODE\n  const isInputCounted = code === BAKE_CODE\n  const isCounted = code === SHAPE_CODE || code === BAKE_CODE\n  let batchTypes = batching.all\n  let defaultBatchSizing = batching.VARIABLE\n  switch(code) {\n    case BAKE_CODE:\n      defaultBatchSizing = batching.NONE\n    case SHAPE_CODE:\n      batchTypes = [batching.FIXED]\n      defaultBatchSizing = batching.FIXED\n    case WEIGH_CODE:  \n      batchTypes = []\n      defaultBatchSizing = batching.NONE\n  }\n  return {\n    code: code,\n    label: string.capitalize(code),\n    sequence: sequence,\n    hasItemWeight: code === SHAPE_CODE,\n    hasItemsPerBatch: code === SHAPE_CODE,\n    isCounted: isCounted,\n    isWeighed: !isCounted,\n    isInputCounted: isInputCounted,\n    isInputWeighed: !isInputCounted,\n    inputs: null, // lazy init below\n    outputs: null, // lazy init below,\n    batchTypes: batchTypes,\n    defaultOrigin: code === WEIGH_CODE ? origins.SUPPLIED : origins.PRODUCED,\n    defaultStatus: code === BAKE_CODE ? status.FINISHED : status.INGREDIENT,\n    defaultBatchSizing: defaultBatchSizing,\n    allowPartialFixedBatch: code !== WEIGH_CODE, // weighing has no batches\n    requiresRecipe: requiresRecipe,\n    requiresIngredients: requiresIngredients,\n    isWeigh: code === WEIGH_CODE,\n    isMix: code === MIX_CODE,\n    isFerment: code === FERMENT_CODE,\n    isLayer: code === LAYER_CODE,\n    isShape: code === SHAPE_CODE,\n    isBake: code === BAKE_CODE,\n    isAssemble: code === ASSEMBLE_CODE,\n    isDecorate: code === DECORATE_CODE\n  }\n}\n\nconst weigh = instantiate(WEIGH_CODE, 1)\nconst mix = instantiate(MIX_CODE, 2)\nconst ferment = instantiate(FERMENT_CODE, 3)\nconst layer = instantiate(LAYER_CODE, 4)\nconst shape = instantiate(SHAPE_CODE, 5)\nconst bake = instantiate(BAKE_CODE, 6)\nconst assemble = instantiate(ASSEMBLE_CODE, 7)\nconst decorate = instantiate(DECORATE_CODE, 8)\nconst all = [weigh, mix, ferment, layer, shape, bake] // assemble decorate\n// const PREBAKE = [weigh, mix, ferment, layer, shape]\nconst DEFAULT = bake\n\nconst map = {}\nall.forEach(x => {\n  x.inputs = getInputStages(x.code)\n  x.outputs = getOutputStages(x.code)\n  map[x.code] = x\n})\n\nfunction getInputStages(code) {\n  switch(code) {\n    case WEIGH_CODE:\n      return []\n    case MIX_CODE:\n      return [weigh, mix]\n    case FERMENT_CODE:\n      return [layer] // why not mix ?\n    case LAYER_CODE:\n      return [weigh, mix]\n    case SHAPE_CODE:\n      return [mix, layer]\n    case BAKE_CODE:\n      return [weigh, shape]\n    case ASSEMBLE_CODE:\n      return [weigh, mix, shape, bake]\n    case DECORATE_CODE:\n      return [weigh, mix, shape, bake, assemble]\n    default:\n      throw new Error(`invalid stage code ${code}`)\n  }\n}\n\nfunction getOutputStages(code) {\n  switch(code) {\n    case WEIGH_CODE:\n      return [mix, ferment, layer, shape, bake]\n    case MIX_CODE:\n      return [ferment, layer, shape, bake]\n    case FERMENT_CODE:\n      return [mix, layer, shape, bake] \n    case LAYER_CODE:\n      return [mix, ferment, shape, bake]\n    case SHAPE_CODE:\n      return [mix, ferment, layer, bake]\n    case BAKE_CODE:\n      return [assemble, decorate]\n    case ASSEMBLE_CODE:\n      return [decorate]\n    case DECORATE_CODE:\n      return []\n    default:\n      throw new Error(`invalid stage code ${code}`)\n  }\n}\n\nexport default {\n  WEIGH_CODE,\n  MIX_CODE,\n  FERMENT_CODE,\n  LAYER_CODE,\n  SHAPE_CODE,\n  BAKE_CODE,\n  ASSEMBLE_CODE,\n  DECORATE_CODE,\n  weigh,\n  mix,\n  ferment,\n  layer,\n  shape,\n  bake,\n  assemble,\n  decorate,\n  all,\n  map,\n  DEFAULT\n}\n\n\n"]}