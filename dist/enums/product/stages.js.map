{"version":3,"sources":["../../../src/enums/product/stages.js"],"names":["WEIGH_CODE","MIX_CODE","FERMENT_CODE","LAYER_CODE","SHAPE_CODE","BAKE_CODE","ASSEMBLE_CODE","DECORATE_CODE","instantiate","code","sequence","requiresRecipe","requiresIngredients","isInputCounted","isCounted","batchTypes","batching","all","defaultBatchSizing","VARIABLE","NONE","FIXED","label","string","capitalize","hasItemWeight","hasItemsPerBatch","isWeighed","isInputWeighed","inputs","outputs","defaultOrigin","origins","SUPPLIED","PRODUCED","defaultStatus","status","FINISHED","INGREDIENT","allowPartialFixedBatch","isWeigh","isMix","isFerment","isLayer","isShape","isBake","isAssemble","isDecorate","weigh","mix","ferment","layer","shape","bake","assemble","decorate","DEFAULT","map","forEach","x","getInputStages","getOutputStages","Error"],"mappings":"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","sourcesContent":["import string from '../../util/string'\nimport origins from './origins'\nimport status from './status'\nimport batching from './batching'\n\n/*\nStages of production:\n  * prep (was raw/weigh)\n  * mix\n  * ferment\n  * layer\n  * shape\n  * bake\n  * assemble\n  * decorate\n\nRef:\n  * http://bakingstories.blogspot.com/p/12-steps.html\n*/\n\nconst WEIGH_CODE = 'Weigh' // or scale\nconst MIX_CODE = 'Mix'\nconst FERMENT_CODE = 'Ferment' // bulk/primary fermentation\nconst LAYER_CODE = 'Layer' // or fold\n// const PRESHAPE_CODE = 'preshape' // or rounding - before rest\n// const REST_CODE = 'rest' // before final shape\nconst SHAPE_CODE = 'Shape' // or panning\n// const PROOF_CODE = 'proof' // or final ferment\nconst BAKE_CODE = 'Bake'\nconst ASSEMBLE_CODE = 'Assemble'\nconst DECORATE_CODE = 'Decorate'\n\n\nfunction instantiate(code, sequence) {\n  const requiresRecipe = code !== WEIGH_CODE\n  /* baked (finished) products are allowede to have have unspecified ingredients\n   * but all other actions with recipe require ingredients */\n  const requiresIngredients = requiresRecipe && code !== BAKE_CODE\n  const isInputCounted = code === BAKE_CODE\n  const isCounted = code === SHAPE_CODE || code === BAKE_CODE\n  let batchTypes = batching.all\n  let defaultBatchSizing = batching.VARIABLE\n  switch(code) {\n    case BAKE_CODE:\n      defaultBatchSizing = batching.NONE\n    case SHAPE_CODE:\n      batchTypes = [batching.FIXED]\n      defaultBatchSizing = batching.FIXED\n    case WEIGH_CODE:  \n      batchTypes = []\n      defaultBatchSizing = batching.NONE\n  }\n  return {\n    code: code,\n    label: string.capitalize(code),\n    sequence: sequence,\n    hasItemWeight: code === SHAPE_CODE,\n    hasItemsPerBatch: code === SHAPE_CODE,\n    isCounted: isCounted,\n    isWeighed: !isCounted,\n    isInputCounted: isInputCounted,\n    isInputWeighed: !isInputCounted,\n    inputs: null, // lazy init below\n    outputs: null, // lazy init below,\n    batchTypes: batchTypes,\n    defaultOrigin: code === WEIGH_CODE ? origins.SUPPLIED : origins.PRODUCED,\n    defaultStatus: code === BAKE_CODE ? status.FINISHED : status.INGREDIENT,\n    defaultBatchSizing: defaultBatchSizing,\n    allowPartialFixedBatch: code !== WEIGH_CODE, // weighing has no batches\n    requiresRecipe: requiresRecipe,\n    requiresIngredients: requiresIngredients,\n    isWeigh: code === WEIGH_CODE,\n    isMix: code === MIX_CODE,\n    isFerment: code === FERMENT_CODE,\n    isLayer: code === LAYER_CODE,\n    isShape: code === SHAPE_CODE,\n    isBake: code === BAKE_CODE,\n    isAssemble: code === ASSEMBLE_CODE,\n    isDecorate: code === DECORATE_CODE\n  }\n}\n\nconst weigh = instantiate(WEIGH_CODE, 1)\nconst mix = instantiate(MIX_CODE, 2)\nconst ferment = instantiate(FERMENT_CODE, 3)\nconst layer = instantiate(LAYER_CODE, 4)\nconst shape = instantiate(SHAPE_CODE, 5)\nconst bake = instantiate(BAKE_CODE, 6)\nconst assemble = instantiate(ASSEMBLE_CODE, 7)\nconst decorate = instantiate(DECORATE_CODE, 8)\nconst all = [weigh, mix, ferment, layer, shape, bake] // assemble decorate\n// const PREBAKE = [weigh, mix, ferment, layer, shape]\nconst DEFAULT = bake\n\nconst map = {}\nall.forEach(x => {\n  x.inputs = getInputStages(x.code)\n  x.outputs = getOutputStages(x.code)\n  map[x.code] = x\n})\n\nfunction getInputStages(code) {\n  switch(code) {\n    case WEIGH_CODE:\n      return []\n    case MIX_CODE:\n      return [weigh, mix]\n    case FERMENT_CODE:\n      return [layer] // why not mix ?\n    case LAYER_CODE:\n      return [weigh, mix]\n    case SHAPE_CODE:\n      return [mix, layer]\n    case BAKE_CODE:\n      return [weigh, shape]\n    case ASSEMBLE_CODE:\n      return [weigh, mix, shape, bake]\n    case DECORATE_CODE:\n      return [weigh, mix, shape, bake, assemble]\n    default:\n      throw new Error(`invalid stage code ${code}`)\n  }\n}\n\nfunction getOutputStages(code) {\n  switch(code) {\n    case WEIGH_CODE:\n      return [mix, ferment, layer, shape, bake]\n    case MIX_CODE:\n      return [ferment, layer, shape, bake]\n    case FERMENT_CODE:\n      return [mix, layer, shape, bake] \n    case LAYER_CODE:\n      return [mix, ferment, shape, bake]\n    case SHAPE_CODE:\n      return [mix, ferment, layer, bake]\n    case BAKE_CODE:\n      return [assemble, decorate]\n    case ASSEMBLE_CODE:\n      return [decorate]\n    case DECORATE_CODE:\n      return []\n    default:\n      throw new Error(`invalid stage code ${code}`)\n  }\n}\n\nexport default {\n  WEIGH_CODE,\n  MIX_CODE,\n  FERMENT_CODE,\n  LAYER_CODE,\n  SHAPE_CODE,\n  BAKE_CODE,\n  ASSEMBLE_CODE,\n  DECORATE_CODE,\n  weigh,\n  mix,\n  ferment,\n  layer,\n  shape,\n  bake,\n  assemble,\n  decorate,\n  all,\n  map,\n  DEFAULT\n}\n\n\n"],"file":"stages.js"}