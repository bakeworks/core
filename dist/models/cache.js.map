{"version":3,"sources":["../../src/models/cache.js"],"names":["module","exports","users","products","productsById","customers","customersById","recipes","recipesByProductId","ingredients","ingredientsByRecipeId","standingOrders","specialOrders","reset","getCustomer","getProduct","init","arg","initUsers","initProducts","initCustomers","initRecipes","initStandingOrders","initSpecialOrders","id","failIfAbsent","customer","get","undefined","Error","product","Map","json","JSON","parse","forEach","set","_id","initIngredients","ingredientsJson","ingredient","product_id","recipeIngredients","recipe_id","push","recipesJson","recipe","resolveOrder","order","customer_id","quantities","quantities_csv","split","map","q","parseInt"],"mappings":"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","file":"cache.js","sourcesContent":["module.exports = {\n  users,\n  products, productsById,\n  customers, customersById,\n  recipes, recipesByProductId,\n  ingredients, ingredientsByRecipeId,\n  standingOrders, specialOrders,\n  reset,\n  getCustomer,\n  getProduct,\n  init,\n}\n\nvar users = null\nvar products = null\nvar productsById = null\nvar customers = null\nvar customersById = null\nvar recipes = null\nvar recipesByProductId = null\nvar ingredients = null\nvar ingredientsByRecipeId = null\nvar standingOrders = null\nvar specialOrders = null\n\n/*\n  Arg should be an object whose properties are json strings:\n  {\n    users,\n    products,\n    customers,\n    recipes,\n    ingredients,\n    standingOrders,\n    specialOrders\n  }\n  Most likely source is database load (mongodb to json).\n*/\nfunction init(arg) {\n  reset()\n  initUsers(arg.users)\n  initProducts(arg.products)\n  initCustomers(arg.customers)\n  initRecipes(arg.recipes, arg.ingredients)\n  initStandingOrders(arg.standingOrders)\n  initSpecialOrders(arg.specialOrders)\n}\n\nfunction reset() {\n  users =\n  products =\n  productsById =\n  customers =\n  customersById =\n  recipes =\n  recipesByProductId =\n  ingredients =\n  ingredientsByRecipeId =\n  standingOrders =\n  specialOrders = null\n}\n\nfunction getCustomer(id, failIfAbsent = true) {\n  const customer = customersById.get(id)\n  if (customer === undefined && failIfAbsent) throw new Error(`customer #{id} not found`)\n  return customer\n}\n\nfunction getProduct(id, failIfAbsent = true) {\n  const product = productsById.get(id)\n  productsById = new Map()\n  if (product === undefined && failIfAbsent) throw new Error(`product #{id} not found`)\n  return product\n}\n\nfunction initUsers(json) {\n  users = JSON.parse(json)\n}\n\nfunction initProducts(json) {\n  products = JSON.parse(json)\n  products.forEach(product => {\n    productsById.set(product._id, product)\n  })\n}\n\nfunction initCustomers(json) {\n  customers = JSON.parse(json)\n  customersById = new Map()\n  customers.forEach(customer => customersById.set(customer._id, customer))\n}\n\nfunction initIngredients(ingredientsJson) {\n  ingredients = JSON.parse(ingredientsJson)\n  ingredientsByRecipeId = new Map()\n  ingredients.forEach(ingredient => {\n    ingredient.product = getProduct(ingredient.product_id)\n    let recipeIngredients = ingredientsByRecipeId.set(ingredient.recipe_id)\n    if (recipeIngredients === undefined) {\n      recipeIngredients = []\n      ingredientsByRecipeId.set(ingredient.recipe_id, recipeIngredients)\n    }\n    recipeIngredients.push(ingredient)\n  })\n}\n\nfunction initRecipes(recipesJson, ingredientsJson) {\n  initIngredients(ingredientsJson)\n  recipes = JSON.parse(recipesJson)\n  recipesByProductId = new Map()\n  recipes.forEach(recipe => {\n    recipe.product = getProduct(recipe.product_id)\n    recipe.ingredients = ingredientsByRecipeId.get(recipe._id)\n    if (recipe.ingredients === undefined) recipe.ingredients = []\n    recipesByProductId.set(recipe.product_id, recipe)\n  })\n}\n\nfunction resolveOrder(order) {\n  order.product = getProduct(order.product_id)\n  order.customer = getProduct(order.customer_id)\n  order.quantities = order.quantities_csv.split(',').map(q => parseInt(q))\n}\n\nfunction initStandingOrders(json) {\n  standingOrders = JSON.parse(json)\n  standingOrders.forEach(order => resolveOrder(order))\n}\n\nfunction initSpecialOrders(json) {\n  specialOrders = JSON.parse(json)\n  specialOrders.forEach(order => resolveOrder(order))\n}\n"]}