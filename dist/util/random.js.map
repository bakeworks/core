{"version":3,"sources":["../../src/util/random.js"],"names":["int","max","Number","MAX_SAFE_INTEGER","Math","round","random","intBetween","min","element","array","randomInt","length","property","obj","keys","Object","shuffle","arg","isString","result","split","slice","m","i","tmp","join","uuid","h","number","HEX_DIGITS"],"mappings":";;;;;;;;;AAAA;;AAEA,SAASA,GAAT,CAAaC,GAAG,GAAGC,MAAM,CAACC,gBAA1B,EAA4C;AAC1C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,GAA3B,CAAP;AACD;;AAED,SAASM,UAAT,CAAoBC,GAApB,EAAyBP,GAAzB,EAA8B;AAC5B,MAAIO,GAAG,GAAGP,GAAV,EAAe,OAAOM,UAAU,CAACN,GAAD,EAAMO,GAAN,CAAjB;AACf,SAAOA,GAAG,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGO,GAAvB,CAAX,CAAb;AACD;;AAED,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAOA,KAAK,CAACC,SAAS,CAACD,KAAK,CAACE,MAAP,CAAV,CAAZ;AACD;;AAED,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,GAAZ,CAAb;AACA,SAAOA,GAAG,CAACL,OAAO,CAACM,IAAD,CAAR,CAAV;AACD,C,CAED;AACA;;;AACA,SAASE,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,QAAMC,QAAQ,GAAG,OAAOD,GAAP,KAAe,QAAhC;AACA,QAAME,MAAM,GAAGD,QAAQ,GAAGD,GAAG,CAACG,KAAJ,CAAU,EAAV,CAAH,GAAmBH,GAAG,CAACI,KAAJ,CAAU,CAAV,CAA1C;AACA,MAAIC,CAAC,GAAGH,MAAM,CAACR,MAAf;AAAA,MAAuBY,CAAvB;AAAA,MAA0BC,GAA1B;;AACA,SAAOF,CAAP,EAAU;AACRC,IAAAA,CAAC,GAAKpB,IAAI,CAACE,MAAL,KAAgBiB,CAAC,EAAlB,KAA0B,CAA/B,CADQ,CAC0B;;AAClCE,IAAAA,GAAG,GAAGL,MAAM,CAACG,CAAD,CAAZ;AACAH,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAYH,MAAM,CAACI,CAAD,CAAlB;AACAJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAYC,GAAZ;AACD;;AACD,SAAON,QAAQ,GAAGC,MAAM,CAACM,IAAP,CAAY,EAAZ,CAAH,GAAqBN,MAApC;AACD;;AAED,SAASO,IAAT,CAAcf,MAAM,GAAG,EAAvB,EAA2B;AACzB,MAAIe,IAAI,GAAG,EAAX;AACA,QAAMC,CAAC,GAAGC,gBAAOC,UAAP,CAAkBlB,MAAlB,GAA2B,CAArC;;AACA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAApB,EAA4BY,CAAC,EAA7B,EAAiC;AAC/BG,IAAAA,IAAI,IAAIE,gBAAOC,UAAP,CAAkBnB,SAAS,CAACiB,CAAD,CAA3B,CAAR;AACD;;AACD,SAAOD,IAAP;AACD;;eAEc;AACb3B,EAAAA,GADa;AAEbO,EAAAA,UAFa;AAGbE,EAAAA,OAHa;AAIbI,EAAAA,QAJa;AAKbI,EAAAA,OALa;AAMbU,EAAAA;AANa,C","sourcesContent":["import number from './number'\n\nfunction int(max = Number.MAX_SAFE_INTEGER) {\n  return Math.round(Math.random() * max)  \n}\n\nfunction intBetween(min, max) {\n  if (min > max) return intBetween(max, min)\n  return min + Math.round(Math.random() * (max - min))  \n}\n\nfunction element(array) {\n  return array[randomInt(array.length)]\n}\n\nfunction property(obj) {\n  const keys = Object.keys(obj)\n  return obj[element(keys)]\n}\n\n// Argument may be an array or string (or indexable object with slice() method).\n// Returns a new array or string which is a shuffled version of the argument.\nfunction shuffle(arg) {\n  const isString = typeof arg === 'string'\n  const result = isString ? arg.split('') : arg.slice(0)\n  let m = result.length, i, tmp\n  while (m) {\n    i = ((Math.random() * m--) >>> 0) // faster than round?\n    tmp = result[m]\n    result[m] = result[i]\n    result[i] = tmp\n  }\n  return isString ? result.join('') : result\n}\n\nfunction uuid(length = 16) {\n  var uuid = ''\n  const h = number.HEX_DIGITS.length - 1\n  for (let i = 0; i < length; i++) {\n    uuid += number.HEX_DIGITS[randomInt(h)]\n  }\n  return uuid\n}\n\nexport default {\n  int,\n  intBetween,\n  element,\n  property,\n  shuffle,\n  uuid\n}"],"file":"random.js"}