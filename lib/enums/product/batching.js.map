{"version":3,"sources":["../../../src/enums/product/batching.js"],"names":["number","NONE_CODE","FIXED_CODE","VARIABLE_CODE","STEPPED_CODE","ALL_CODES","DEFAULT_MAX_SIZE","instantiate","type","min","max","step","partial","label","isNone","isFixed","isVariable","isStepped","isPartial","partal","none","inst","fixed","batch_size","variable","TYPE","stepped","nsteps","validate","errors","push","isMultiple","length","join","normalise","error","Error"],"mappings":"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","file":"batching.js","sourcesContent":["import number from '../../util/number'\n\n/*\nProduction batch sizing:\n  * none\n    * min = max = step = 0\n  * fixed\n    * min > 0, min = max, step = 0\n  * variable\n    * min > 0, max > min, step = 0\n  * stepped\n    * min > 0, max > min, step > 0\n    * min and max are multiples of step\n\nBatchSizing properties\n{\n  type,\n  label,\n  min,\n  max,\n  step,\n  partial,\n  isNone,\n  isFixed,\n  isVariable,\n  isStepped,\n  isPartial\n}\n*/\n\nconst NONE_CODE = 'None'\nconst FIXED_CODE = 'Fixed'\nconst VARIABLE_CODE = 'Variable'\nconst STEPPED_CODE = 'Stepped'\nconst ALL_CODES = [NONE_CODE, FIXED_CODE, VARIABLE_CODE, STEPPED_CODE]\nconst DEFAULT_MAX_SIZE = 80\n\nfunction instantiate(type, min, max, step = 0, partial = false) {\n  return {\n    type: type,\n    label: type,\n    min: min,\n    max: max,\n    step: step,\n    partial: partial,\n    // for convenience\n    isNone: type === NONE_CODE,\n    isFixed: type === FIXED_CODE,\n    isVariable: type === VARIABLE_CODE,\n    isStepped: type === STEPPED_CODE,\n    isPartial: partal\n  }\n}\n\nfunction none() {\n  const inst = instantiate(NONE_CODE, 0, 0, 0)\n  return inst\n}\n\nfunction fixed(batch_size = DEFAULT_MAX_SIZE, partial = false) {\n  return instantiate(FIXED_CODE, batch_size, batch_size, 0, partial)\n}\n\nfunction variable(min = 1, max = DEFAULT_MAX_SIZE) {\n  return instantiate(VARIABLE_CODE, TYPE, min, max)\n}\n\nfunction stepped(step = 4, nsteps = null) {\n  return instantiate(STEPPED_CODE, step, nsteps === null ? step * 20 : step * nsteps, step)\n}\n\n// Returns an string with error messages separated by \"\\n\" if params don't suit type (type).\n// Returns null if no error.\nfunction validate(type, min, max, step, partial = false) {\n  if (type === FIXED_CODE) {\n    if (min <= 0) return `${type} batch size must be greater than zero.`\n  } else if (type === VARIABLE_CODE || type === STEPPED_CODE) {\n    const errors = []\n    if (min >= max) errors.push(`${type} batch minimum must be less than the maximum.`)\n    if (type === STEPPED_CODE) {\n      if (!number.isMultiple(step, min))\n        errors.push(`${type} batch minimum must be a multiple of the batch step size.`)\n      if (!number.isMultiple(step, max))\n        errors.push(`${type} batch maximum must be a multiple of the batch step size.`)\n    }\n    if (partial) errors.push(`Only ${FIXED_CODE} size batches may be partial.`)\n    if (errors.length > 0) return errors.join('\\n')\n  } \n  return null     \n}\n\nfunction normalise(type, min, max, step, partial) {\n  const error = validate(type, min, max, step, partial)\n  if (error) throw new Error(error)\n  switch(type) {\n    case NONE_CODE: \n      return none()\n    case FIXED_CODE:\n      return fixed(min, partial)\n    case VARIABLE_CODE:\n      return variable(min, max)\n    case STEPPED_CODE:\n      return stepped(min, step, max)\n    default:\n      throw new Error(`unhandled batch size type ${type}'`)\n  }\n}\n\nexport default {\n  NONE_CODE,\n  FIXED_CODE,\n  VARIABLE_CODE,\n  STEPPED_CODE,\n  ALL_CODES,\n  DEFAULT_MAX_SIZE,\n  none, fixed, variable, stepped,\n  validate, normalise\n}\n"]}