{"version":3,"sources":["../../../src/enums/product/batching.js"],"names":["number","NONE_CODE","FIXED_CODE","VARIABLE_CODE","STEPPED_CODE","ALL_CODES","DEFAULT_MAX_SIZE","instantiate","type","min","max","step","partial","label","isNone","isFixed","isVariable","isStepped","isPartial","partal","none","inst","fixed","batch_size","variable","TYPE","stepped","nsteps","validate","errors","push","isMultiple","length","join","normalise","error","Error"],"mappings":"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","sourcesContent":["import number from '../../util/number'\n\n/*\nProduction batch sizing:\n  * none\n    * min = max = step = 0\n  * fixed\n    * min > 0, min = max, step = 0\n  * variable\n    * min > 0, max > min, step = 0\n  * stepped\n    * min > 0, max > min, step > 0\n    * min and max are multiples of step\n\nBatchSizing properties\n{\n  type,\n  label,\n  min,\n  max,\n  step,\n  partial,\n  isNone,\n  isFixed,\n  isVariable,\n  isStepped,\n  isPartial\n}\n*/\n\nconst NONE_CODE = 'None'\nconst FIXED_CODE = 'Fixed'\nconst VARIABLE_CODE = 'Variable'\nconst STEPPED_CODE = 'Stepped'\nconst ALL_CODES = [NONE_CODE, FIXED_CODE, VARIABLE_CODE, STEPPED_CODE]\nconst DEFAULT_MAX_SIZE = 80\n\nfunction instantiate(type, min, max, step = 0, partial = false) {\n  return {\n    type: type,\n    label: type,\n    min: min,\n    max: max,\n    step: step,\n    partial: partial,\n    // for convenience\n    isNone: type === NONE_CODE,\n    isFixed: type === FIXED_CODE,\n    isVariable: type === VARIABLE_CODE,\n    isStepped: type === STEPPED_CODE,\n    isPartial: partal\n  }\n}\n\nfunction none() {\n  const inst = instantiate(NONE_CODE, 0, 0, 0)\n  return inst\n}\n\nfunction fixed(batch_size = DEFAULT_MAX_SIZE, partial = false) {\n  return instantiate(FIXED_CODE, batch_size, batch_size, 0, partial)\n}\n\nfunction variable(min = 1, max = DEFAULT_MAX_SIZE) {\n  return instantiate(VARIABLE_CODE, TYPE, min, max)\n}\n\nfunction stepped(step = 4, nsteps = null) {\n  return instantiate(STEPPED_CODE, step, nsteps === null ? step * 20 : step * nsteps, step)\n}\n\n// Returns an string with error messages separated by \"\\n\" if params don't suit type (type).\n// Returns null if no error.\nfunction validate(type, min, max, step, partial = false) {\n  if (type === FIXED_CODE) {\n    if (min <= 0) return `${type} batch size must be greater than zero.`\n  } else if (type === VARIABLE_CODE || type === STEPPED_CODE) {\n    const errors = []\n    if (min >= max) errors.push(`${type} batch minimum must be less than the maximum.`)\n    if (type === STEPPED_CODE) {\n      if (!number.isMultiple(step, min))\n        errors.push(`${type} batch minimum must be a multiple of the batch step size.`)\n      if (!number.isMultiple(step, max))\n        errors.push(`${type} batch maximum must be a multiple of the batch step size.`)\n    }\n    if (partial) errors.push(`Only ${FIXED_CODE} size batches may be partial.`)\n    if (errors.length > 0) return errors.join('\\n')\n  } \n  return null     \n}\n\nfunction normalise(type, min, max, step, partial) {\n  const error = validate(type, min, max, step, partial)\n  if (error) throw new Error(error)\n  switch(type) {\n    case NONE_CODE: \n      return none()\n    case FIXED_CODE:\n      return fixed(min, partial)\n    case VARIABLE_CODE:\n      return variable(min, max)\n    case STEPPED_CODE:\n      return stepped(min, step, max)\n    default:\n      throw new Error(`unhandled batch size type ${type}'`)\n  }\n}\n\nexport default {\n  NONE_CODE,\n  FIXED_CODE,\n  VARIABLE_CODE,\n  STEPPED_CODE,\n  ALL_CODES,\n  DEFAULT_MAX_SIZE,\n  none, fixed, variable, stepped,\n  validate, normalise\n}\n"],"file":"batching.js"}